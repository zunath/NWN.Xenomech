name: Build and Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test XM.App.Editor.Tests/ --configuration Release --no-build --collect:"XPlat Code Coverage"

    - name: Build CLI tools
      run: dotnet publish XM.App.CLI/XM.App.CLI.csproj --configuration Release --output Tools/ --no-restore

    - name: Build HAK files
      run: |
        cd Tools
        ./XM.App.CLI.exe -k
      shell: cmd

    - name: Pack module
      run: |
        cd Tools
        ./XM.App.CLI.exe -p "../Module/Xenomech.mod"
      shell: cmd

    - name: Create release bundle
      run: |
        mkdir release
        # Copy built module
        copy Module\Xenomech.mod release\
        # Copy HAK files (if generated)
        if exist "*.hak" copy *.hak release\
        # Copy Docker setup
        copy server\docker-compose.yml release\
        copy server\nwserver.env release\
        # Copy documentation
        copy README.md release\ 2>nul || echo "No README found"
        copy CLAUDE.md release\ 2>nul || echo "No CLAUDE.md found"
      shell: cmd

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xenomech-build-${{ github.run_number }}
        path: release/
        retention-days: 30

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: xenomech-build-${{ github.run_number }}
        path: release/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max